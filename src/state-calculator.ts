import { LitElement, html, nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { Task, TaskStatus, initialState } from '@lit-labs/task';
import { baseStyles, gridStyles } from './styles';
import {
  formTemplate,
  formStyles,
  utilityFormTemplate,
} from './calculator-form';
import { FilingStatus, OwnerStatus } from './calculator-types';
import { CALCULATOR_FOOTER } from './calculator-footer';
import { fetchApi } from './api/fetch';
import {
  stateIncentivesTemplate,
  stateIncentivesStyles,
  cardStyles,
  dividerStyles,
  separatorStyles,
} from './state-incentive-details';
import { OptionParam } from './select';
import { STATES } from './states';

const loadingTemplate = () => html`
  <div class="card card-content">Loading...</div>
`;

const errorTemplate = (error: unknown) => html`
  <div class="card card-content">
    ${typeof error === 'object' && error && 'message' in error && error.message
      ? error.message
      : 'Error loading incentives.'}
  </div>
`;

const DEFAULT_CALCULATOR_API_HOST: string = 'https://api.rewiringamerica.org';

@customElement('rewiring-america-state-calculator')
export class RewiringAmericaStateCalculator extends LitElement {
  static override styles = [
    baseStyles,
    cardStyles,
    gridStyles,
    ...formStyles,
    stateIncentivesStyles,
    dividerStyles,
    separatorStyles,
  ];

  /* supported properties to control showing/hiding of each card in the widget */

  @property({ type: Boolean, attribute: 'hide-form' })
  hideForm: boolean = false;

  @property({ type: Boolean, attribute: 'hide-details' })
  hideDetails: boolean = false;

  /* supported properties to control which API path and key is used to load the calculator results */

  @property({ type: String, attribute: 'api-key' })
  apiKey: string = '';

  @property({ type: String, attribute: 'api-host' })
  apiHost: string = DEFAULT_CALCULATOR_API_HOST;

  /**
   * Property to customize the calculator for a particular state. Must be the
   * two-letter code, uppercase (example: "NY").
   *
   * Currently the only customization is to display the name of the state.
   * TODO: Have a nice error message if you enter a zip/address outside this
   * state, if it's defined.
   */
  @property({ type: String, attribute: 'state' })
  state: string = '';

  /* supported properties to allow pre-filling the form */

  @property({ type: String, attribute: 'zip' })
  zip: string = '';

  @property({ type: String, attribute: 'owner-status' })
  ownerStatus: OwnerStatus = 'homeowner';

  @property({ type: String, attribute: 'household-income' })
  householdIncome: string = '0';

  @property({ type: String, attribute: 'tax-filing' })
  taxFiling: FilingStatus = 'single';

  @property({ type: String, attribute: 'household-size' })
  householdSize: string = '1';

  @property({ type: String })
  utility: string = '';

  @property({ type: String })
  selectedProject: string = 'heat_pump_air_conditioner_heater';

  submit(e: SubmitEvent) {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    this.zip = (formData.get('zip') as string) || '';
    this.ownerStatus = (formData.get('owner_status') as OwnerStatus) || '';
    this.householdIncome = (formData.get('household_income') as string) || '';
    this.taxFiling = (formData.get('tax_filing') as FilingStatus) || '';
    this.householdSize = (formData.get('household_size') as string) || '';
    this.selectedProject = (formData.get('project') as string) || '';
  }

  isFormComplete() {
    return !!(
      this.zip &&
      this.ownerStatus &&
      this.taxFiling &&
      this.householdIncome &&
      this.householdSize &&
      this.selectedProject
    );
  }

  private _task = new Task(this, {
    // this array of parameters is generated by the `args` function below
    // it's formatted with snake_case to make it really easy to throw into URLSearchParams
    task: async ([
      zip,
      owner_status,
      household_income,
      tax_filing,
      household_size,
      utility,
    ]) => {
      if (!this.isFormComplete() || !utility) {
        // this is a special response type provided by Task to keep it in the INITIAL state
        return initialState;
      }
      const query = new URLSearchParams({
        'location[zip]': zip,
        owner_status,
        household_income,
        tax_filing,
        household_size,
      });
      query.append('authority_types', 'federal');
      query.append('authority_types', 'state');
      query.append('authority_types', 'utility');
      query.set('utility', utility);

      return await fetchApi(
        this.apiKey,
        this.apiHost,
        '/api/v1/calculator',
        query,
      );
    },
    // if the args array changes then the task will run again
    args: () => [
      this.zip,
      this.ownerStatus,
      this.householdIncome,
      this.taxFiling,
      this.householdSize,
      this.utility,
    ],
  });

  private _utilityOptionsTask = new Task<string[], OptionParam[]>(this, {
    task: async ([zip]) => {
      if (!zip) {
        return initialState;
      }
      const query = new URLSearchParams({
        'location[zip]': zip,
      });
      const utilityMap = await fetchApi(
        this.apiKey,
        this.apiHost,
        '/api/v1/utilities',
        query,
      );

      return Object.keys(utilityMap).map(id => ({
        value: id,
        label: utilityMap[id].name,
      }));
    },
    onComplete: options => (this.utility = options[0].value),
    args: () => [this.zip],
  });

  override render() {
    const utilityForm =
      this.isFormComplete() &&
      this._utilityOptionsTask.status === TaskStatus.COMPLETE &&
      this._utilityOptionsTask.value
        ? html` <div class="divider">
            <h1 class="divider__section">
              Incentives available to you in ${STATES[this.state]}
            </h1>
            <div class="spacer"></div>
            <div class="divider__section card card-content">
              ${utilityFormTemplate(
                this.utility,
                this._utilityOptionsTask.value,
                newUtility => (this.utility = newUtility),
              )}
            </div>
          </div>`
        : nothing;

    return html`
      <div class="calculator">
        <div class="card card-content">
          <h1>Your household info</h1>
          ${this.hideForm
            ? nothing
            : formTemplate(
                [
                  this.selectedProject,
                  this.zip,
                  this.ownerStatus,
                  this.householdIncome,
                  this.taxFiling,
                  this.householdSize,
                ],
                true,
                (event: InputEvent) => {
                  this.zip = (event.target as HTMLInputElement).value;
                },
                (event: SubmitEvent) => this.submit(event),
              )}
        </div>
        ${utilityForm}
        ${this.isFormComplete() && this.utility
          ? html`
              <div class="separator"></div>
              ${this._task.render({
                pending: loadingTemplate,
                complete: results =>
                  stateIncentivesTemplate(results, this.selectedProject),
                error: errorTemplate,
              })}
            `
          : nothing}
        ${CALCULATOR_FOOTER}
      </div>
    `;
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'rewiring-america-state-calculator': RewiringAmericaStateCalculator;
  }
}
